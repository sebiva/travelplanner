#include "skane.h"

QString Skane::address =
        "http://api.vasttrafik.se/bin/rest.exe/v1/trip?authKey=924b3c93-d187-47ab-bfde-12c230a7e97b&format=xml";
QString Skane::nameaddress =
        "http://www.labs.skanetrafiken.se/v2.2/querystation.asp?inpPointfr=";
Skane *Skane::mskane = 0;


Skane::Skane()
{
}

Skane::~Skane() {
    qDebug() << "Deleting Skane";
}
/*
 * Returns the singleton skÃ¥netrafiken parser.
 */
Parser *Skane::getinstance() {
    if (mskane == 0) {
        mskane = new Skane();
    }
    return mskane;
}

/*
 * Takes information about a trip and makes a search. Eventually emits ready() when the result is available
 * in the list trips.
 */
bool Skane::getXML(QString fromid, QString toid, QString date, QString time) {
    QNetworkAccessManager * manager = new QNetworkAccessManager(this);
    connect(manager, SIGNAL(finished(QNetworkReply*)),
            this, SLOT(parsereply(QNetworkReply*)) );
    // Make the search
    manager->get(
    manager->get(QNetworkRequest(QUrl(address +
                                      "&date=" + date +
                                      "&time=" + time +
                                      "&originId=" + fromid +
                                      "&destId=" + toid)));
    qDebug()<<"ADDRESS::"<<(address+"&date="+date +"&time="+time+"&originId="+fromid+"&destId="+toid);
    return true;
}

/*
 * Parses the search reply, putting the resulting trip info in the trips list. Emits ready() when done,
 * containing a message for any error  that occured.
 */
void Skane::parsereply(QNetworkReply *reply) {
    if (reply->error() != QNetworkReply::NoError) {
        qDebug() << "An error occured";
        emit replyready("No connection");
        sender()->deleteLater();
        return;
    }

    //qDebug() << "Parsing";
    QXmlStreamReader xml;
    xml.setDevice(reply);
    QXmlStreamAttributes attr;

    trips->clear();
    xml.readNextStartElement(); //Envelope
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Body
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Getjourneyresponse
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Getjourneyresult
    qDebug() << xml.name() << xml.isEndElement();

    skiptoendof(&xml, "Code");
    qDebug() << xml.name() << xml.isEndElement();

    skiptoendof(&xml, "Message");
    qDebug() << xml.name() << xml.isEndElement();

    skiptoendof(&xml, "JourneyResultKey");
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Journeys
    qDebug() << xml.name() << xml.isEndElement();

    Trip *trip = new Trip();
    trip->setParent(this);
    trip->valid = true;
    trip->passed = true;
    trip->errmsg = "";

    xml.readNextStartElement(); //Journey
    qDebug() << xml.name() << xml.isEndElement();

    //While
    skiptoendof(&xml, "SequenceNo");
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Depdatetime
    qDebug() << xml.name() << xml.isEndElement();

    QStringList dep = xml.readElementText().split("T");
    trip->depdate = dep.at(0);
    trip->deprtdate = trip->depdate;
    trip->deptime = dep.at(1);
    trip->deprttime = trip->deptime;
    xml.skipCurrentElement();

    xml.readNextStartElement(); //Arrdatetime
    qDebug() << xml.name() << xml.isEndElement();

    QStringList ariv = xml.readElementText().split("T");
    trip->arivdate = ariv.at(0);
    trip->arivrtdate = trip->arivdate;
    trip->arivtime = ariv.at(1);
    trip->arivrttime = trip->arivtime;
    xml.skipCurrentElement();

    skiptoendof(&xml, "JourneyKey");
    qDebug() << xml.name() << xml.isEndElement();

    xml.readNextStartElement(); //Routelink
    qDebug() << xml.name() << xml.isEndElement();



    Leg *leg = NULL;
    //While2

    leg = new Leg();
    leg->setParent(trip);
    skiptoendof(&xml, "RouteLinkKey");
    qDebug() << xml.name() << xml.isEndElement();

    QStringList depleg = xml.readElementText().split("T");





    qDebug() << "Parsing done, no errors!";
    emit replyready("");
    sender()->deleteLater();
}

bool Skane::skiptoendof(QXmlStreamReader *reader, QString str) {
    int i = 20;
    while (i > 0) {
        if (reader->isEndElement() && reader->name() == str) {
            reader->readNext();
            return true;
        }
        reader->readNext();
        i++;
    }
    return false;
}

bool Skane::getstops(QString str) {
    str = removespecials(str);
    qDebug() << "SEARCHING STOPS::" << str;
    QNetworkAccessManager * manager = new QNetworkAccessManager(this);
    connect(manager, SIGNAL(finished(QNetworkReply*)),
            this, SLOT(parsestops(QNetworkReply*)) );
    manager->get(QNetworkRequest(QUrl(nameaddress + str)));
    qDebug()<<"NAMEADDRESS::"<<(nameaddress+str);
    return true;
}

void Skane::parsestops(QNetworkReply *reply) {
    if (reply->error() != QNetworkReply::NoError) {
        qDebug() << "No connection in stoplist search";
        sender()->deleteLater();
        return;
    }
    QXmlStreamReader xml;
    xml.setDevice(reply);
    stops->clear();
    xml.readNextStartElement(); //Envelope
    if (xml.hasError()) {
        qDebug() << "Error!!!";
        emit stopsready("Error searching for stop");
        return;
    }

    xml.readNextStartElement(); //Body
    xml.readNextStartElement(); //Getstartendpointresponse
    xml.readNextStartElement(); //Getstartendpointresult
    xml.readNextStartElement(); //Code
    xml.skipCurrentElement(); //Code end
    xml.readNextStartElement(); //Message
    xml.skipCurrentElement(); //Message end
    xml.readNextStartElement(); //Startpoints
    xml.readNextStartElement(); //Point
    xml.readNextStartElement(); //Id


    int count = 0;
    while(!xml.isEndElement() && count < 10) {
        QString id =  xml.readElementText();
        xml.readNextStartElement(); //Name
        QString name = xml.readElementText();

        stops->append(name + "#" + id);

        xml.skipCurrentElement(); //Point end
        xml.readNextStartElement(); //Point
        xml.readNextStartElement(); //Id
        count++;
    }
    emit stopsready("");
    sender()->deleteLater();
}
